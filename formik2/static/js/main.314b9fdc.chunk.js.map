{"version":3,"sources":["App/App.jsx","index.js"],"names":["App","initialValues","title","firstName","lastName","email","password","confirmPassword","acceptTerms","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","alert","JSON","stringify","errors","touched","status","className","name","as","value","component","htmlFor","type","id","React","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.314b9fdc.chunk.js","sourcesContent":["import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Formik\n                initialValues={{\n                    title: '',\n                    firstName: '',\n                    lastName: '',\n                    email: '',\n                    password: '',\n                    confirmPassword: '',\n                    acceptTerms: false\n                }}\n                validationSchema={Yup.object().shape({\n                    title: Yup.string()\n                        .required('Title is required'),\n                    firstName: Yup.string()\n                        .required('First Name is required'),\n                    lastName: Yup.string()\n                        .required('Last Name is required'),\n                    email: Yup.string()\n                        .email('Email is invalid')\n                        .required('Email is required'),\n                    password: Yup.string()\n                        .min(6, 'Password must be at least 6 characters')\n                        .required('Password is required'),\n                    confirmPassword: Yup.string()\n                        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                        .required('Confirm Password is required'),\n                    acceptTerms: Yup.bool()\n                        .oneOf([true], 'Accept Ts & Cs is required')\n                })}\n                onSubmit={fields => {\n                    alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4))\n                }}\n            >\n                {({ errors, status, touched }) => (\n                    <Form>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col\">\n                                <label>Title</label>\n                                <Field name=\"title\" as=\"select\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')}>\n                                    <option value=\"\"></option>\n                                    <option value=\"Mr\">Mr</option>\n                                    <option value=\"Mrs\">Mrs</option>\n                                    <option value=\"Miss\">Miss</option>\n                                    <option value=\"Ms\">Ms</option>\n                                </Field>\n                                <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                            <div className=\"form-group col-5\">\n                                <label htmlFor=\"firstName\">First Name</label>\n                                <Field name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                                <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                            <div className=\"form-group col-5\">\n                                <label htmlFor=\"lastName\">Last Name</label>\n                                <Field name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                                <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">Email</label>\n                            <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col\">\n                                <label htmlFor=\"password\">Password</label>\n                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                            <div className=\"form-group col\">\n                                <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                                <Field name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                                <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                        </div>\n                        <div className=\"form-group form-check\">\n                            <Field type=\"checkbox\" name=\"acceptTerms\" id=\"acceptTerms\" className={'form-check-input ' + (errors.acceptTerms && touched.acceptTerms ? ' is-invalid' : '')} />\n                            <label htmlFor=\"acceptTerms\" className=\"form-check-label\">Accept Terms & Conditions</label>\n                            <ErrorMessage name=\"acceptTerms\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                            <button type=\"reset\" className=\"btn btn-secondary\">Reset</button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        )\n    }\n}\n\nexport { App }; ","import React from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from './App';\n\nrender(\n    <App />,\n    document.getElementById('app')\n);"],"sourceRoot":""}